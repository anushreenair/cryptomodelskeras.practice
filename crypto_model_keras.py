# -*- coding: utf-8 -*-
"""crypto_model.keras

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eOxsX5ZaxbXxLxCifmXVj8kYveIu4CVi
"""

pip install numpy pandas matplotlib seaborn tensorflow keras scikit-learn yfinance

import yfinance as yf

# Get user input for cryptocurrency symbol
crypto_symbol = input("Enter cryptocurrency symbol (e.g., BTC-USD, ETH-USD, DOGE-USD): ").upper()

# Download historical data
df = yf.download(crypto_symbol, start="2018-01-01", end="2024-01-01")

# Handle invalid symbols
if df.empty:
    print("‚ùå Invalid cryptocurrency symbol or no data available.")
else:
    print(f"\nüìä Showing historical data for {crypto_symbol}:\n")
    print(df.head())  # Display first few rows

import numpy as np
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0,1))
df_scaled = scaler.fit_transform(df["Close"].values.reshape(-1,1))

# Function to Create Sequences
def create_sequences(data, time_step=60):
    X, Y = [], []
    for i in range(len(data)-time_step-1):
        X.append(data[i:(i+time_step), 0])
        Y.append(data[i + time_step, 0])
    return np.array(X), np.array(Y)

time_step = 60  # Use past 60 days to predict next day
X, Y = create_sequences(df_scaled)

# Train-Test Split
train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
Y_train, Y_test = Y[:train_size], Y[train_size:]

# Reshape for LSTM (samples, time-steps, features)
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(time_step, 1)),
    Dropout(0.2),
    LSTM(units=50, return_sequences=False),
    Dropout(0.2),
    Dense(units=25),
    Dense(units=1)
])

model.compile(optimizer="adam", loss="mean_squared_error")
model.summary()

model.fit(X_train, Y_train, batch_size=16, epochs=30)

predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions.reshape(-1,1))
Y_test = scaler.inverse_transform(Y_test.reshape(-1,1))

import matplotlib.pyplot as plt

plt.figure(figsize=(14,6))
plt.plot(Y_test, label="Actual Price", color="blue")
plt.plot(predictions, label="Predicted Price", color="red")
plt.xlabel("Days")
plt.ylabel("Crypto Price")
plt.legend()
plt.title("Bitcoin Price Prediction using LSTM")
plt.show()

import keras.saving
keras.saving.save_model(model, "crypto_model.keras")